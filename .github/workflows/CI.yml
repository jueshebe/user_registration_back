name: CI

on: [pull_request]

permissions:
  contents: read
  pull-requests: write  # Permite que Reviewdog comente en el PR

jobs:
  build:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.11"]
    steps:
    - uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v3
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install Poetry
      run: |
        curl -sSL https://install.python-poetry.org | python3 -
        echo "$HOME/.local/bin" >> $GITHUB_PATH

    - name: Install dependencies with Poetry
      run: |
        poetry install --no-interaction

    - name: Install Reviewdog
      run: |
        curl -fsSL https://raw.githubusercontent.com/reviewdog/reviewdog/master/install.sh | sh -s -- -b $HOME/.local/bin

    # Ejecutar Flake8 y agregar comentarios en el PR
    - name: Run flake8 with Reviewdog
      continue-on-error: true  # Asegura que Reviewdog pueda reportar antes de que falle
      run: |
        poetry run flake8 --format=default | $HOME/.local/bin/reviewdog -efm="%f:%l:%c: %m" -name="flake8" -reporter=github-check -fail-level=error
      env:
        REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Run pylint with Reviewdog
      continue-on-error: true
      run: |
        poetry run pylint app/* --output-format=parseable | tee pylint.log | $HOME/.local/bin/reviewdog -efm="%f:%l:%c: %m" -name="pylint" -reporter=github-check -fail-level=error
      env:
        REVIEWDOG_GITHUB_API_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Run pylint
      run: |
        poetry run pylint app/*

    # Correr tests y hacer fallar el pipeline si fallan
    - name: Run Tests
      run: |
        poetry run pytest . -v
